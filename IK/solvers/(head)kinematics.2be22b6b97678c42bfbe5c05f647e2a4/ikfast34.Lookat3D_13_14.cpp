/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 34 generated on 2011-02-24 13:08:08.142771
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 2; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x23000006; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
eetrans[0]=((-0.0170700000000000)+(((0.0680000000000000)*(x0)))+(((-0.0303663000000000)*(x1)))+(((0.115985200000000)*(x0)*(x2)))+(((0.0764249000000000)*(x0)*(x3))));
eetrans[1]=((((0.0303663000000000)*(x0)))+(((0.0680000000000000)*(x1)))+(((0.115985200000000)*(x1)*(x2)))+(((0.0764249000000000)*(x1)*(x3))));
eetrans[2]=((0.381450000000000)+(((-0.0764249000000000)*(x2)))+(((0.115985200000000)*(x3))));
eerot[0]=((((0.0369572582802016)*(x1)))+(((-0.0289480404449327)*(x0)*(x2)))+(((0.998897478230278)*(x0)*(x3))));
eerot[1]=((((-0.0369572582802016)*(x0)))+(((-0.0289480404449327)*(x1)*(x2)))+(((0.998897478230278)*(x1)*(x3))));
eerot[2]=((((-0.0289480404449327)*(x3)))+(((-0.998897478230278)*(x2))));
}

class IKSolver {
public:
IKReal j13, cj13, sj13, htj13,
j14, cj14, sj14, htj14,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.0170700000000000)+(px));
new_py=py;
new_pz=((-0.381450000000000)+(pz));
px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IKReal dummyeval[1];
IKReal x0=(px)*(px);
IKReal x1=(pz)*(pz);
IKReal x2=(py)*(py);
dummyeval[0]=((4.81207548820063e+15)+(((2.87688499888987e+17)*(py)))+(((-809145240803832.)*(px)))+(((-2.00000000000000)*(pz)*(x2)))+(((4.00000000000000)*(py)*(x0)))+(((-4.00000000000000)*(pz)*(x0)))+(((-5.94959735885174e+15)*(x1)))+(((5.50000000000000)*(px)*(py)))+(((-2.00000000000000)*(py)*(x1)))+(((4.35005255369985e+18)*(x2)))+((py)*(py)*(py))+(((-256.000000000000)*(px)*(py)*(pz)))+(((-5.94959735885174e+15)*(x0)))+(((16.0000000000000)*(px)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IKReal op[6+1], zeror[6];
int numroots;
IKReal x3=(px)*(px);
IKReal x4=(pz)*(pz);
IKReal x5=(py)*(py);
IKReal x6=((0.0311912496578736)*(py));
IKReal x7=((1.73472347597681e-18)*(px)*(pz));
IKReal x8=((2.16840434497101e-19)*(py)*(x4));
IKReal x9=((8.77277027935821e-5)*(px));
IKReal x10=(px)*(px)*(px);
IKReal x11=((8.67361737988404e-19)*(px)*(x3));
IKReal x12=((5.42101086242752e-20)*(px)*(x5));
IKReal x13=((1.88717962829719)*(x3));
IKReal x14=((6.35274710440725e-21)*(pz));
IKReal x15=((3.46944695195361e-18)*(py)*(x3));
IKReal x16=((2.01424434857073e-17)*(px)*(py));
IKReal x17=((8.67361737988404e-19)*(pz)*(x3));
IKReal x18=((1.11022302462516e-16)*(px)*(py)*(pz));
IKReal x19=((0.00193516991456432)*(x4));
IKReal x20=((0.474213869467502)*(x5));
IKReal x21=((0.000175455405587164)*(py));
IKReal x22=((4.33680868994202e-19)*(px)*(x4));
IKReal x23=((3.87771683253019e-18)*(px)*(pz));
IKReal x24=((8.67361737988404e-19)*(px)*(py)*(pz));
IKReal x25=((2.16840434497101e-19)*(py)*(pz));
IKReal x26=((0.0623824993157472)*(px));
IKReal x27=((1.73472347597681e-18)*(px)*(x5));
IKReal x28=((0.471633642914749)*(x5));
IKReal x29=((4.33680868994202e-19)*(pz)*(x3));
IKReal x30=((5.96311194867027e-19)*(px)*(py));
IKReal x31=((8.77277027935822e-5)*(px));
IKReal x32=((0.000645056638188108)*(x3));
IKReal x33=(py)*(py)*(py);
IKReal x34=((1.08420217248550e-19)*(py)*(x5));
IKReal x35=((2.16840434497101e-19)*(pz));
IKReal x36=((2.20228566286118e-19)*(px)*(pz));
IKReal x37=((2.77555756156289e-17)*(px)*(py)*(pz));
IKReal x38=((4.33680868994202e-19)*(py)*(x3));
IKReal x39=((0.000645056638188107)*(x4));
IKReal x40=((x35)*(x5));
IKReal x41=((0.0311912496578736)*(py));
op[0]=((0.000521726269847136)+(x7)+(x6)+(x8)+(((-1.00000000000000)*(x40)))+(((-1.00000000000000)*(x39)))+(((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x37)))+(((-1.00000000000000)*(x32)))+(x38)+(x30)+(x34)+(x28)+(x29)+(((-1.00000000000000)*(x9))));
op[1]=((((-1.00000000000000)*(x24)))+(((1.88911479821175)*(px)*(py)))+(((5.55111512312578e-17)*(pz)*(x5)))+(((-3.03576608295941e-18)*(x5)))+(((3.03576608295941e-18)*(x3)))+(((-8.32667268468867e-17)*(pz)*(x3)))+(x11)+(x25)+(x26)+(x27)+(x21)+(x22)+(x23));
op[2]=((0.00156517880954141)+(((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x15)))+(((-1.00000000000000)*(x12)))+(((-1.00000000000000)*(x20)))+(x7)+(x6)+(x8)+(x13)+(x14)+(x16)+(((-1.00000000000000)*(x9))));
op[3]=((((-1.00000000000000)*(x11)))+(((8.67361737988404e-19)*(px)*(x4)))+(((0.000350910811174329)*(py)))+(((0.124764998631494)*(px))));
op[4]=((0.00156517880954141)+(((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x41)))+(((-1.00000000000000)*(x36)))+(x31)+(x13)+(x12)+(x15)+(x14)+(x16)+(((-1.00000000000000)*(x8))));
op[5]=((((4.38424253498826e-18)*(x5)))+(((1.11022302462516e-16)*(pz)*(x3)))+(((-1.11022302462516e-16)*(pz)*(x5)))+(x11)+(x24)+(x25)+(x26)+(x27)+(x21)+(x22)+(x23)+(((-1.88911479821175)*(px)*(py)))+(((-3.64012409082536e-18)*(x3))));
op[6]=((0.000521726269847136)+(((-1.00000000000000)*(x41)))+(((-1.00000000000000)*(x40)))+(((-1.00000000000000)*(x38)))+(((-1.00000000000000)*(x39)))+(((-1.00000000000000)*(x34)))+(((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x36)))+(((-1.00000000000000)*(x37)))+(((-1.00000000000000)*(x32)))+(x31)+(x30)+(x28)+(x29)+(((-1.00000000000000)*(x8))));
polyroots6(op,zeror,numroots);
IKReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IKReal htj13 = zeror[ij13];
tempj13array[0]=((2.00000000000000)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
bool valid = true;
for( int kj13 = 0; kj13 < numsolutions; ++kj13)
{
    if( IKabs(cj13array[kj13]-cj13array[numsolutions]) < 0.0001 && IKabs(sj13array[kj13]-sj13array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[2];
IKReal x42=((3365.57593029251)*(cj13)*(py)*(pz));
IKReal x43=((14.7058823529412)*(cj13)*(px));
IKReal x44=((3365.57593029251)*(px)*(pz)*(sj13));
IKReal x45=((111.290321058859)*(pz));
IKReal x46=((14.7058823529412)*(py)*(sj13));
dummyeval[0]=((-1.00000000000000)+(((-1.00000000000000)*(x42)))+(x46)+(x44)+(x45)+(x43));
dummyeval[1]=((1.00000000000000)+(((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x44)))+(((-1.00000000000000)*(x46)))+(((-1.00000000000000)*(x43)))+(x42));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x47=((59.4448522130650)*(px)*(sj13));
IKReal x48=(cj13)*(cj13);
IKReal x49=x5;
IKReal x50=((898.847994527195)*(x48)*(x49));
IKReal x51=x3;
IKReal x52=(sj13)*(sj13);
IKReal x53=((898.847994527195)*(x51)*(x52));
IKReal x54=((1.00000000000000)+(x47)+(x50)+(x53));
IKReal x55=((59.4448522130649)*(cj13)*(py));
IKReal x56=((1797.69598905439)*(cj13)*(px)*(py)*(sj13));
IKReal x57=((x55)+(x56));
IKReal x58=((x54)+(((-1.00000000000000)*(x57))));
dummyeval[0]=x58;
dummyeval[1]=x58;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x59=(cj13)*(cj13);
IKReal x60=((14.7058823529412)*(py)*(x59));
IKReal x61=((3365.57593029251)*(cj13)*(py)*(pz)*(sj13));
IKReal x62=((1.00000000000000)*(sj13));
IKReal x63=((x60)+(x61)+(x62));
IKReal x64=((111.290321058859)*(pz)*(sj13));
IKReal x65=((14.7058823529412)*(cj13)*(px)*(sj13));
IKReal x66=((14.7058823529412)*(py));
IKReal x67=(sj13)*(sj13);
IKReal x68=((3365.57593029251)*(px)*(pz)*(x67));
IKReal x69=((x64)+(x65)+(x66)+(x68));
IKReal x70=((x63)+(((-1.00000000000000)*(x69))));
dummyeval[0]=x70;
dummyeval[1]=x70;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal evalcond[1];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j13)), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x71=x5;
IKReal x72=((898.847994527195)*(x71));
IKReal x73=((1.00000000000000)+(x72));
IKReal x74=((59.4448522130650)*(py));
IKReal x75=((((-1.00000000000000)*(x74)))+(x73));
dummyeval[0]=x75;
dummyeval[1]=x75;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x76=((3365.57593029251)*(py)*(pz));
IKReal x77=((14.7058823529412)*(px));
IKReal x78=((111.290321058859)*(pz));
dummyeval[0]=((-1.00000000000000)+(((-1.00000000000000)*(x76)))+(x77)+(x78));
dummyeval[1]=((1.00000000000000)+(((-1.00000000000000)*(x77)))+(((-1.00000000000000)*(x78)))+(x76));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x79=((1.94323256255294)*(pz));
IKReal x80=((444.726578285239)*(px)*(py));
IKReal x81=((1.00000000000000)+(x79)+(x80));
IKReal x82=((14.7058823529412)*(px));
IKReal x83=((30.2414073233963)*(py));
IKReal x84=((x82)+(x83));
IKReal x85=((x81)+(((-1.00000000000000)*(x84))));
dummyeval[0]=x85;
dummyeval[1]=x85;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x86=x3;
IKReal x87=((0.00436353146990392)*(pz));
IKReal x88=((0.998634161060410)*(px)*(py));
IKReal x89=((0.00224550141552346)+(x88)+(x87));
IKReal x90=((0.0330220796400509)*(px));
IKReal x91=((0.0679071229521079)*(py));
IKReal x92=((x91)+(x90));
IKReal x93=((x89)+(((-1.00000000000000)*(x92))));
IKReal x94=((IKabs(x93) != 0)?((IKReal)1/(x93)):(IKReal)1.0e30);
j14array[0]=IKatan2(((-1.00000000000000)*(x94)*(((0.00390992176918853)+(((0.00251032282269110)*(pz)))+(((-0.0369165120983985)*(px)*(pz)))+(((0.000145498268210358)*(px)))+(((-0.00106984020742910)*(x86)))+(((-0.117939500501326)*(py)))))), ((x94)*(((0.000231614575039870)+(((0.00502064564538219)*(px)))+(((0.00341788572398466)*(py)))+(((0.00106984020742910)*(px)*(pz)))+(((-7.27491341051789e-5)*(pz)))+(((-0.0369165120983985)*(x86)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x95=((cj13)*(px));
IKReal x96=((py)*(sj13));
IKReal x97=((x95)+(x96));
IKReal x98=((0.0680000000000000)+(((-1.00000000000000)*(x97))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((0.0289480404449327)*(sj14)*(x98)))+(((-0.998897478230278)*(pz)*(sj14)))+(((-0.998897478230278)*(cj14)*(x98)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x99=x4;
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((5.81029206044998e+108)+(((-8.54454714772056e+109)*(px)))+(((-6.46629268853219e+110)*(pz)))+(((1.95549791066201e+112)*(py)*(pz))))) != 0)?((IKReal)1/(((5.81029206044998e+108)+(((-8.54454714772056e+109)*(px)))+(((-6.46629268853219e+110)*(pz)))+(((1.95549791066201e+112)*(py)*(pz)))))):(IKReal)1.0e30))*(((7.87805142880743e+108)+(((-7.22888972681359e+110)*(x99)))+(((1.42455350810437e+108)*(pz)))+(((6.69280969222643e+109)*(py)))+(((-2.09493162956526e+109)*(px)*(pz)))))), ((-1.00000000000000)*(((IKabs(((4.15214483531973e+52)+(((1.39743587168404e+56)*(py)*(pz)))+(((-6.10609534605843e+53)*(px)))+(((-4.62093531805617e+54)*(pz))))) != 0)?((IKReal)1/(((4.15214483531973e+52)+(((1.39743587168404e+56)*(py)*(pz)))+(((-6.10609534605843e+53)*(px)))+(((-4.62093531805617e+54)*(pz)))))):(IKReal)1.0e30))*(((5.47826039007938e+53)+(((-3.51281309885360e+53)*(pz)))+(((-1.49707785005453e+53)*(x99)))+(((5.16590161596117e+54)*(px)*(pz)))+(((-1.65038304431768e+55)*(py)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x100=((cj13)*(px));
IKReal x101=((py)*(sj13));
IKReal x102=((x100)+(x101));
IKReal x103=((0.0680000000000000)+(((-1.00000000000000)*(x102))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((-0.998897478230278)*(pz)*(sj14)))+(((0.0289480404449327)*(sj14)*(x103)))+(((0.0369572582802016)*(px)*(sj13)))+(((-0.998897478230278)*(cj14)*(x103))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x104=x5;
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((2.17556018655927e+109)+(((1.95549791066201e+112)*(x104)))+(((-1.29325853770644e+111)*(py))))) != 0)?((IKReal)1/(((2.17556018655927e+109)+(((1.95549791066201e+112)*(x104)))+(((-1.29325853770644e+111)*(py)))))):(IKReal)1.0e30))*(((1.67683025754778e+107)+(((2.39954841944145e+109)*(pz)))+(((-7.22888972681359e+110)*(py)*(pz)))+(((-2.46592684933497e+108)*(px)))+(((1.42455350810437e+108)*(py)))+(((-2.09493162956526e+109)*(px)*(py)))))), ((-1.00000000000000)*(((IKabs(((1.55469654512509e+53)+(((-9.24187063611235e+54)*(py)))+(((1.39743587168404e+56)*(x104))))) != 0)?((IKReal)1/(((1.55469654512509e+53)+(((-9.24187063611235e+54)*(py)))+(((1.39743587168404e+56)*(x104)))))):(IKReal)1.0e30))*(((1.16603869165160e+52)+(((-3.51281309885360e+53)*(py)))+(((-1.49707785005453e+53)*(py)*(pz)))+(((5.16590161596117e+54)*(px)*(py)))+(((-1.71476278184058e+53)*(px)))+(((-1.76219806598663e+52)*(pz)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x105=((cj13)*(px));
IKReal x106=((py)*(sj13));
IKReal x107=((x105)+(x106));
IKReal x108=((0.0680000000000000)+(((-1.00000000000000)*(x107))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((-0.998897478230278)*(pz)*(sj14)))+(((0.0289480404449327)*(sj14)*(x108)))+(((0.0369572582802016)*(px)*(sj13)))+(((-0.998897478230278)*(cj14)*(x108))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x109=((59.4448522130650)*(py));
IKReal x110=x5;
IKReal x111=((898.847994527195)*(x110));
IKReal x112=((1.00000000000000)+(x111)+(x109));
dummyeval[0]=x112;
dummyeval[1]=x112;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x113=((14.7058823529412)*(px));
IKReal x114=((3365.57593029251)*(py)*(pz));
IKReal x115=((111.290321058859)*(pz));
dummyeval[0]=((-1.00000000000000)+(((-1.00000000000000)*(x113)))+(x115)+(x114));
dummyeval[1]=((1.00000000000000)+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(x113));
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
{
IKReal dummyeval[2];
IKReal x116=((1.94323256255294)*(pz));
IKReal x117=((444.726578285239)*(px)*(py));
IKReal x118=((30.2414073233963)*(py));
IKReal x119=((14.7058823529412)*(px));
IKReal x120=((1.00000000000000)+(x117)+(x116)+(x119)+(x118));
dummyeval[0]=x120;
dummyeval[1]=x120;
if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x121=((0.0330220796400509)*(px));
IKReal x122=((0.00436353146990392)*(pz));
IKReal x123=((0.998634161060410)*(px)*(py));
IKReal x124=((0.0679071229521079)*(py));
IKReal x125=((0.00224550141552346)+(x124)+(x122)+(x123)+(x121));
IKReal x126=((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30);
IKReal x127=x3;
j14array[0]=IKatan2(((-1.00000000000000)*(x126)*(((0.00390992176918853)+(((0.00251032282269110)*(pz)))+(((0.0369165120983985)*(px)*(pz)))+(((-0.00106984020742910)*(x127)))+(((-0.000145498268210358)*(px)))+(((0.117939500501326)*(py)))))), ((x126)*(((0.000231614575039870)+(((-0.00341788572398466)*(py)))+(((-0.00502064564538219)*(px)))+(((-0.00106984020742910)*(px)*(pz)))+(((-0.0369165120983985)*(x127)))+(((-7.27491341051789e-5)*(pz)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x128=((cj13)*(px));
IKReal x129=((py)*(sj13));
IKReal x130=((x128)+(x129));
IKReal x131=((0.0680000000000000)+(((-1.00000000000000)*(x130))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((-0.998897478230278)*(pz)*(sj14)))+(((-0.998897478230278)*(cj14)*(x131)))+(((0.0289480404449327)*(sj14)*(x131)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x132=x4;
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((5.81029206044998e+108)+(((-1.95549791066201e+112)*(py)*(pz)))+(((-6.46629268853219e+110)*(pz)))+(((8.54454714772056e+109)*(px))))) != 0)?((IKReal)1/(((5.81029206044998e+108)+(((-1.95549791066201e+112)*(py)*(pz)))+(((-6.46629268853219e+110)*(pz)))+(((8.54454714772056e+109)*(px)))))):(IKReal)1.0e30))*(((7.87805142880743e+108)+(((-7.22888972681359e+110)*(x132)))+(((2.09493162956526e+109)*(px)*(pz)))+(((1.42455350810437e+108)*(pz)))+(((-6.69280969222643e+109)*(py)))))), ((-1.00000000000000)*(((IKabs(((4.15214483531973e+52)+(((-1.39743587168404e+56)*(py)*(pz)))+(((6.10609534605843e+53)*(px)))+(((-4.62093531805617e+54)*(pz))))) != 0)?((IKReal)1/(((4.15214483531973e+52)+(((-1.39743587168404e+56)*(py)*(pz)))+(((6.10609534605843e+53)*(px)))+(((-4.62093531805617e+54)*(pz)))))):(IKReal)1.0e30))*(((5.47826039007938e+53)+(((-1.49707785005453e+53)*(x132)))+(((-3.51281309885360e+53)*(pz)))+(((1.65038304431768e+55)*(py)))+(((-5.16590161596117e+54)*(px)*(pz)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x133=((cj13)*(px));
IKReal x134=((py)*(sj13));
IKReal x135=((x134)+(x133));
IKReal x136=((0.0680000000000000)+(((-1.00000000000000)*(x135))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((-0.998897478230278)*(pz)*(sj14)))+(((-0.998897478230278)*(cj14)*(x136)))+(((0.0289480404449327)*(sj14)*(x136)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x137=x5;
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((2.17556018655927e+109)+(((1.95549791066201e+112)*(x137)))+(((1.29325853770644e+111)*(py))))) != 0)?((IKReal)1/(((2.17556018655927e+109)+(((1.95549791066201e+112)*(x137)))+(((1.29325853770644e+111)*(py)))))):(IKReal)1.0e30))*(((1.67683025754778e+107)+(((-1.42455350810437e+108)*(py)))+(((2.39954841944145e+109)*(pz)))+(((2.46592684933497e+108)*(px)))+(((7.22888972681359e+110)*(py)*(pz)))+(((-2.09493162956526e+109)*(px)*(py)))))), ((-1.00000000000000)*(((IKabs(((1.55469654512509e+53)+(((1.39743587168404e+56)*(x137)))+(((9.24187063611235e+54)*(py))))) != 0)?((IKReal)1/(((1.55469654512509e+53)+(((1.39743587168404e+56)*(x137)))+(((9.24187063611235e+54)*(py)))))):(IKReal)1.0e30))*(((1.16603869165160e+52)+(((1.49707785005453e+53)*(py)*(pz)))+(((5.16590161596117e+54)*(px)*(py)))+(((3.51281309885360e+53)*(py)))+(((-1.76219806598663e+52)*(pz)))+(((1.71476278184058e+53)*(px)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x138=((cj13)*(px));
IKReal x139=((py)*(sj13));
IKReal x140=((x139)+(x138));
IKReal x141=((0.0680000000000000)+(((-1.00000000000000)*(x140))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((0.0289480404449327)*(sj14)*(x141)))+(((-0.998897478230278)*(cj14)*(x141)))+(((-0.998897478230278)*(pz)*(sj14)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x142=(cj13)*(cj13);
IKReal x143=(sj13)*(sj13);
j14array[0]=IKatan2(((((IKabs(((((-1.95549791066201e+112)*(px)*(pz)*(x143)))+(((-6.46629268853219e+110)*(pz)*(sj13)))+(((-8.54454714772056e+109)*(py)))+(((-8.54454714772056e+109)*(cj13)*(px)*(sj13)))+(((8.54454714772056e+109)*(py)*(x142)))+(((1.95549791066201e+112)*(cj13)*(py)*(pz)*(sj13)))+(((5.81029206044998e+108)*(sj13))))) != 0)?((IKReal)1/(((((-1.95549791066201e+112)*(px)*(pz)*(x143)))+(((-6.46629268853219e+110)*(pz)*(sj13)))+(((-8.54454714772056e+109)*(py)))+(((-8.54454714772056e+109)*(cj13)*(px)*(sj13)))+(((8.54454714772056e+109)*(py)*(x142)))+(((1.95549791066201e+112)*(cj13)*(py)*(pz)*(sj13)))+(((5.81029206044998e+108)*(sj13)))))):(IKReal)1.0e30))*(((((7.23686853191464e+110)*(pz)*(((((-0.00196846675025542)*(sj13)))+(((0.0289480404449327)*(py)))+(((0.998897478230278)*(pz)*(sj13)))+(((0.00340745011251788)*(cj13)))))))+(((((((-2.31200785592311e+111)*(sj13)))+(((-7.23686853191464e+110)*(cj13)*(pz)))))*(((0.00340745011251788)+(((0.0289480404449327)*(cj13)*(py)))+(((-0.0289480404449327)*(px)*(sj13)))))))))), ((((IKabs(((((-1.39743587168404e+56)*(px)*(pz)*(x143)))+(((6.10609534605843e+53)*(py)*(x142)))+(((-6.10609534605843e+53)*(cj13)*(px)*(sj13)))+(((-4.62093531805617e+54)*(pz)*(sj13)))+(((1.39743587168404e+56)*(cj13)*(py)*(pz)*(sj13)))+(((-6.10609534605843e+53)*(py)))+(((4.15214483531973e+52)*(sj13))))) != 0)?((IKReal)1/(((((-1.39743587168404e+56)*(px)*(pz)*(x143)))+(((6.10609534605843e+53)*(py)*(x142)))+(((-6.10609534605843e+53)*(cj13)*(px)*(sj13)))+(((-4.62093531805617e+54)*(pz)*(sj13)))+(((1.39743587168404e+56)*(cj13)*(py)*(pz)*(sj13)))+(((-6.10609534605843e+53)*(py)))+(((4.15214483531973e+52)*(sj13)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(((((5.17160342131754e+54)*(cj13)*(pz)))+(((1.65220463589679e+55)*(sj13)))))*(((0.0331572752615227)+(((-0.998897478230278)*(cj13)*(py)))+(((0.998897478230278)*(px)*(sj13)))))))+(((-5.17160342131754e+54)*(pz)*(((((0.998897478230278)*(py)))+(((-0.0679250285196589)*(sj13)))+(((-0.0331572752615227)*(cj13)))+(((-0.0289480404449327)*(pz)*(sj13)))))))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x144=((cj13)*(px));
IKReal x145=((py)*(sj13));
IKReal x146=((x144)+(x145));
IKReal x147=((0.0680000000000000)+(((-1.00000000000000)*(x146))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((0.0289480404449327)*(sj14)*(x147)))+(((-0.998897478230278)*(cj14)*(x147)))+(((-0.998897478230278)*(pz)*(sj14)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x148=(cj13)*(cj13);
IKReal x149=x5;
IKReal x150=x3;
IKReal x151=(sj13)*(sj13);
IKReal x152=((0.998897478230278)*(px)*(sj13));
IKReal x153=((0.0331572752615227)+(x152));
IKReal x154=((0.998897478230278)*(cj13)*(py));
IKReal x155=((((-1.00000000000000)*(x154)))+(x153));
IKReal x156=((0.0289480404449327)*(cj13)*(py));
IKReal x157=((0.00340745011251788)+(x156));
IKReal x158=((0.0289480404449327)*(px)*(sj13));
IKReal x159=((((-1.00000000000000)*(x158)))+(x157));
j14array[0]=IKatan2(((((IKabs(((2.17556018655927e+109)+(((-1.29325853770644e+111)*(cj13)*(py)))+(((1.95549791066201e+112)*(x148)*(x149)))+(((1.95549791066201e+112)*(x150)*(x151)))+(((-3.91099582132402e+112)*(cj13)*(px)*(py)*(sj13)))+(((1.29325853770644e+111)*(px)*(sj13))))) != 0)?((IKReal)1/(((2.17556018655927e+109)+(((-1.29325853770644e+111)*(cj13)*(py)))+(((1.95549791066201e+112)*(x148)*(x149)))+(((1.95549791066201e+112)*(x150)*(x151)))+(((-3.91099582132402e+112)*(cj13)*(px)*(py)*(sj13)))+(((1.29325853770644e+111)*(px)*(sj13)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x159)*(((4.92107060170196e+109)+(((-7.23686853191464e+110)*(cj13)*(px)))+(((-7.23686853191464e+110)*(py)*(sj13)))))))+(((-7.23686853191464e+110)*(pz)*(x155)))))), ((((IKabs(((1.55469654512509e+53)+(((-9.24187063611235e+54)*(cj13)*(py)))+(((-2.79487174336809e+56)*(cj13)*(px)*(py)*(sj13)))+(((1.39743587168404e+56)*(x148)*(x149)))+(((9.24187063611235e+54)*(px)*(sj13)))+(((1.39743587168404e+56)*(x150)*(x151))))) != 0)?((IKReal)1/(((1.55469654512509e+53)+(((-9.24187063611235e+54)*(cj13)*(py)))+(((-2.79487174336809e+56)*(cj13)*(px)*(py)*(sj13)))+(((1.39743587168404e+56)*(x148)*(x149)))+(((9.24187063611235e+54)*(px)*(sj13)))+(((1.39743587168404e+56)*(x150)*(x151)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x155)*(((3.51669032649593e+53)+(((-5.17160342131754e+54)*(py)*(sj13)))+(((-5.17160342131754e+54)*(cj13)*(px)))))))+(((5.17160342131754e+54)*(pz)*(x159)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x160=((cj13)*(px));
IKReal x161=((py)*(sj13));
IKReal x162=((x160)+(x161));
IKReal x163=((0.0680000000000000)+(((-1.00000000000000)*(x162))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((0.0289480404449327)*(sj14)*(x163)))+(((-0.998897478230278)*(cj14)*(x163)))+(((-0.998897478230278)*(pz)*(sj14)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x164=x4;
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((5.81029206044998e+108)+(((-8.54454714772056e+109)*(cj13)*(px)))+(((1.95549791066201e+112)*(cj13)*(py)*(pz)))+(((-6.46629268853219e+110)*(pz)))+(((-8.54454714772056e+109)*(py)*(sj13)))+(((-1.95549791066201e+112)*(px)*(pz)*(sj13))))) != 0)?((IKReal)1/(((5.81029206044998e+108)+(((-8.54454714772056e+109)*(cj13)*(px)))+(((1.95549791066201e+112)*(cj13)*(py)*(pz)))+(((-6.46629268853219e+110)*(pz)))+(((-8.54454714772056e+109)*(py)*(sj13)))+(((-1.95549791066201e+112)*(px)*(pz)*(sj13)))))):(IKReal)1.0e30))*(((7.87805142880743e+108)+(((6.69280969222643e+109)*(cj13)*(py)))+(((-2.09493162956526e+109)*(py)*(pz)*(sj13)))+(((-6.69280969222643e+109)*(px)*(sj13)))+(((-7.22888972681359e+110)*(x164)))+(((-2.09493162956526e+109)*(cj13)*(px)*(pz)))+(((1.42455350810437e+108)*(pz)))))), ((-1.00000000000000)*(((IKabs(((4.15214483531973e+52)+(((1.39743587168404e+56)*(cj13)*(py)*(pz)))+(((-1.39743587168404e+56)*(px)*(pz)*(sj13)))+(((-4.62093531805617e+54)*(pz)))+(((-6.10609534605843e+53)*(cj13)*(px)))+(((-6.10609534605843e+53)*(py)*(sj13))))) != 0)?((IKReal)1/(((4.15214483531973e+52)+(((1.39743587168404e+56)*(cj13)*(py)*(pz)))+(((-1.39743587168404e+56)*(px)*(pz)*(sj13)))+(((-4.62093531805617e+54)*(pz)))+(((-6.10609534605843e+53)*(cj13)*(px)))+(((-6.10609534605843e+53)*(py)*(sj13)))))):(IKReal)1.0e30))*(((5.47826039007938e+53)+(((-3.51281309885360e+53)*(pz)))+(((1.65038304431768e+55)*(px)*(sj13)))+(((-1.49707785005453e+53)*(x164)))+(((5.16590161596117e+54)*(cj13)*(px)*(pz)))+(((-1.65038304431768e+55)*(cj13)*(py)))+(((5.16590161596117e+54)*(py)*(pz)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

IKReal soleval[1];
IKReal x165=((cj13)*(px));
IKReal x166=((py)*(sj13));
IKReal x167=((x166)+(x165));
IKReal x168=((0.0680000000000000)+(((-1.00000000000000)*(x167))));
soleval[0]=((-0.0718608404312735)+(((-0.0289480404449327)*(cj14)*(pz)))+(((-0.0369572582802016)*(cj13)*(py)))+(((0.0289480404449327)*(sj14)*(x168)))+(((-0.998897478230278)*(cj14)*(x168)))+(((-0.998897478230278)*(pz)*(sj14)))+(((0.0369572582802016)*(px)*(sj13))));
if( soleval[0] > 0.0000000000000000  )
{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.vfree.resize(0);
}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}

/// Durand-Kerner polynomial root finding method
static inline void polyroots6(IKReal rawcoeffs[6+1], IKReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[6];
    const int maxsteps = 50;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[6];
    IKReal err[6];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 6; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "2be22b6b97678c42bfbe5c05f647e2a4"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
