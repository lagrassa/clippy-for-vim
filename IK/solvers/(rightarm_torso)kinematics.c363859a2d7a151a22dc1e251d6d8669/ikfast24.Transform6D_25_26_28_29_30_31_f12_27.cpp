/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-01-19 10:31:31.929322
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 2; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int getNumJoints() { return 8; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[1]);
x1=IKcos(j[4]);
x2=IKcos(j[3]);
x3=IKcos(j[7]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKsin(j[6]);
x7=IKsin(j[3]);
x8=IKsin(j[7]);
x9=IKsin(j[5]);
x10=IKsin(j[1]);
x11=IKcos(j[6]);
x12=IKcos(j[2]);
x13=IKcos(j[5]);
eerot[0]=((((-2.22044604925031e-16)*(x10)*(x11)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x13)*(x3)*(x7)))+(((2.22044604925031e-16)*(x0)*(x1)*(x11)*(x12)))+(((1.00000000000000)*(x0)*(x13)*(x4)*(x7)*(x8)))+(((1.00000000000000)*(x0)*(x12)*(x5)*(x8)*(x9)))+(((1.00000000000000)*(x1)*(x10)*(x7)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x0)*(x1)*(x13)*(x2)*(x4)*(x6)))+(((1.00000000000000)*(x10)*(x3)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x2)*(x3)*(x4)))+(((2.22044604925031e-16)*(x0)*(x4)*(x6)*(x7)*(x9)))+(((-2.22044604925031e-16)*(x0)*(x11)*(x2)*(x4)*(x5)))+(((-1.00000000000000)*(x0)*(x1)*(x12)*(x3)*(x6)))+(((-2.22044604925031e-16)*(x1)*(x10)*(x13)*(x6)*(x7)))+(((1.00000000000000)*(x0)*(x1)*(x2)*(x4)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x13)*(x3)*(x5)))+(((-2.22044604925031e-16)*(x10)*(x2)*(x6)*(x9)))+(((1.00000000000000)*(x0)*(x11)*(x3)*(x4)*(x7)*(x9)))+(((1.00000000000000)*(x0)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((-2.22044604925031e-16)*(x0)*(x12)*(x13)*(x5)*(x6)))+(((-1.00000000000000)*(x10)*(x11)*(x2)*(x3)*(x9))));
eerot[1]=((((-1.00000000000000)*(x10)*(x5)*(x6)*(x7)*(x8)))+(((x10)*(x11)*(x2)*(x8)*(x9)))+(((x0)*(x1)*(x2)*(x3)*(x4)*(x9)))+(((x0)*(x12)*(x3)*(x5)*(x9)))+(((x0)*(x13)*(x3)*(x4)*(x7)))+(((x0)*(x1)*(x11)*(x13)*(x2)*(x4)*(x8)))+(((-1.00000000000000)*(x0)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((x1)*(x10)*(x3)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x4)*(x7)*(x8)*(x9)))+(((x0)*(x1)*(x12)*(x6)*(x8)))+(((x0)*(x11)*(x12)*(x13)*(x5)*(x8)))+(((x1)*(x10)*(x11)*(x13)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x13)*(x2)*(x3))));
eerot[2]=((((1.00000000000000)*(x0)*(x1)*(x11)*(x12)))+(((-2.22044604925031e-16)*(x10)*(x3)*(x5)*(x6)*(x7)))+(((-2.22044604925031e-16)*(x0)*(x12)*(x5)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x0)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((2.22044604925031e-16)*(x0)*(x1)*(x12)*(x3)*(x6)))+(((2.22044604925031e-16)*(x10)*(x13)*(x2)*(x8)))+(((-1.00000000000000)*(x10)*(x2)*(x6)*(x9)))+(((2.22044604925031e-16)*(x1)*(x10)*(x11)*(x13)*(x3)*(x7)))+(((2.22044604925031e-16)*(x0)*(x1)*(x11)*(x13)*(x2)*(x3)*(x4)))+(((-2.22044604925031e-16)*(x0)*(x1)*(x2)*(x4)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x0)*(x13)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x1)*(x13)*(x2)*(x4)*(x6)))+(((-1.00000000000000)*(x10)*(x11)*(x5)*(x7)))+(((2.22044604925031e-16)*(x10)*(x11)*(x2)*(x3)*(x9)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x5)*(x6)))+(((-2.22044604925031e-16)*(x1)*(x10)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x2)*(x4)*(x5)))+(((2.22044604925031e-16)*(x0)*(x11)*(x12)*(x13)*(x3)*(x5)))+(((-2.22044604925031e-16)*(x0)*(x11)*(x3)*(x4)*(x7)*(x9)))+(((1.00000000000000)*(x0)*(x4)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x6)*(x7))));
eetrans[0]=((-0.0500000000000000)+(((0.400000000000000)*(x0)*(x12)))+(((-0.180000000000000)*(x0)*(x11)*(x2)*(x4)*(x5)))+(((-0.321000000000000)*(x10)*(x5)*(x7)))+(((-0.321000000000000)*(x0)*(x2)*(x4)*(x5)))+(((-0.180000000000000)*(x10)*(x11)*(x5)*(x7)))+(((0.321000000000000)*(x0)*(x1)*(x12)))+(((-0.180000000000000)*(x1)*(x10)*(x13)*(x6)*(x7)))+(((0.100000000000000)*(x0)))+(((-0.180000000000000)*(x0)*(x1)*(x13)*(x2)*(x4)*(x6)))+(((-0.180000000000000)*(x0)*(x12)*(x13)*(x5)*(x6)))+(((0.180000000000000)*(x0)*(x1)*(x11)*(x12)))+(((0.180000000000000)*(x0)*(x4)*(x6)*(x7)*(x9)))+(((-0.180000000000000)*(x10)*(x2)*(x6)*(x9))));
eerot[3]=((((-2.22044604925031e-16)*(x1)*(x10)*(x13)*(x2)*(x4)*(x6)))+(((1.00000000000000)*(x0)*(x13)*(x2)*(x8)))+(((1.00000000000000)*(x10)*(x12)*(x5)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x10)*(x12)*(x13)*(x5)*(x6)))+(((2.22044604925031e-16)*(x0)*(x2)*(x6)*(x9)))+(((2.22044604925031e-16)*(x0)*(x11)*(x5)*(x7)))+(((2.22044604925031e-16)*(x0)*(x1)*(x13)*(x6)*(x7)))+(((1.00000000000000)*(x10)*(x13)*(x4)*(x7)*(x8)))+(((2.22044604925031e-16)*(x10)*(x4)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x12)*(x13)*(x3)*(x5)))+(((-1.00000000000000)*(x0)*(x1)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x13)*(x2)*(x3)*(x4)))+(((1.00000000000000)*(x1)*(x10)*(x2)*(x4)*(x8)*(x9)))+(((1.00000000000000)*(x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((-1.00000000000000)*(x1)*(x10)*(x12)*(x3)*(x6)))+(((-2.22044604925031e-16)*(x10)*(x11)*(x2)*(x4)*(x5)))+(((2.22044604925031e-16)*(x1)*(x10)*(x11)*(x12)))+(((1.00000000000000)*(x0)*(x11)*(x2)*(x3)*(x9)))+(((1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x3)*(x7)))+(((-1.00000000000000)*(x0)*(x3)*(x5)*(x6)*(x7)))+(((1.00000000000000)*(x10)*(x11)*(x3)*(x4)*(x7)*(x9))));
eerot[4]=((((-1.00000000000000)*(x10)*(x2)*(x4)*(x5)*(x6)*(x8)))+(((x1)*(x10)*(x12)*(x6)*(x8)))+(((x10)*(x13)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x3)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x13)*(x7)*(x8)))+(((x1)*(x10)*(x11)*(x13)*(x2)*(x4)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x4)*(x7)*(x8)*(x9)))+(((x0)*(x13)*(x2)*(x3)))+(((x10)*(x11)*(x12)*(x13)*(x5)*(x8)))+(((x1)*(x10)*(x2)*(x3)*(x4)*(x9)))+(((x10)*(x12)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x2)*(x8)*(x9)))+(((x0)*(x5)*(x6)*(x7)*(x8))));
eerot[5]=((((1.00000000000000)*(x0)*(x11)*(x5)*(x7)))+(((-2.22044604925031e-16)*(x0)*(x1)*(x11)*(x13)*(x3)*(x7)))+(((-2.22044604925031e-16)*(x10)*(x12)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x2)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x2)*(x4)*(x6)))+(((2.22044604925031e-16)*(x0)*(x1)*(x7)*(x8)*(x9)))+(((2.22044604925031e-16)*(x1)*(x10)*(x12)*(x3)*(x6)))+(((1.00000000000000)*(x10)*(x4)*(x6)*(x7)*(x9)))+(((-2.22044604925031e-16)*(x0)*(x13)*(x2)*(x8)))+(((2.22044604925031e-16)*(x1)*(x10)*(x11)*(x13)*(x2)*(x3)*(x4)))+(((-2.22044604925031e-16)*(x10)*(x2)*(x3)*(x4)*(x5)*(x6)))+(((1.00000000000000)*(x0)*(x2)*(x6)*(x9)))+(((-2.22044604925031e-16)*(x10)*(x13)*(x4)*(x7)*(x8)))+(((1.00000000000000)*(x0)*(x1)*(x13)*(x6)*(x7)))+(((-2.22044604925031e-16)*(x10)*(x11)*(x3)*(x4)*(x7)*(x9)))+(((2.22044604925031e-16)*(x10)*(x11)*(x12)*(x13)*(x3)*(x5)))+(((-1.00000000000000)*(x10)*(x12)*(x13)*(x5)*(x6)))+(((1.00000000000000)*(x1)*(x10)*(x11)*(x12)))+(((-2.22044604925031e-16)*(x0)*(x11)*(x2)*(x3)*(x9)))+(((-2.22044604925031e-16)*(x1)*(x10)*(x2)*(x4)*(x8)*(x9)))+(((2.22044604925031e-16)*(x0)*(x3)*(x5)*(x6)*(x7))));
eetrans[1]=((-0.188000000000000)+(((0.180000000000000)*(x10)*(x4)*(x6)*(x7)*(x9)))+(((0.180000000000000)*(x0)*(x1)*(x13)*(x6)*(x7)))+(((0.180000000000000)*(x0)*(x2)*(x6)*(x9)))+(((0.321000000000000)*(x0)*(x5)*(x7)))+(((-0.180000000000000)*(x10)*(x11)*(x2)*(x4)*(x5)))+(((0.100000000000000)*(x10)))+(((0.400000000000000)*(x10)*(x12)))+(((0.321000000000000)*(x1)*(x10)*(x12)))+(((-0.180000000000000)*(x1)*(x10)*(x13)*(x2)*(x4)*(x6)))+(((-0.321000000000000)*(x10)*(x2)*(x4)*(x5)))+(((0.180000000000000)*(x0)*(x11)*(x5)*(x7)))+(((0.180000000000000)*(x1)*(x10)*(x11)*(x12)))+(((-0.180000000000000)*(x10)*(x12)*(x13)*(x5)*(x6))));
eerot[6]=((((1.00000000000000)*(x1)*(x3)*(x4)*(x6)))+(((1.00000000000000)*(x1)*(x12)*(x2)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x11)*(x12)*(x2)*(x5)))+(((1.00000000000000)*(x11)*(x12)*(x3)*(x7)*(x9)))+(((1.00000000000000)*(x12)*(x2)*(x3)*(x5)*(x6)))+(((1.00000000000000)*(x12)*(x13)*(x7)*(x8)))+(((-2.22044604925031e-16)*(x1)*(x12)*(x13)*(x2)*(x6)))+(((-1.00000000000000)*(x4)*(x5)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x1)*(x11)*(x4)))+(((-1.00000000000000)*(x1)*(x11)*(x12)*(x13)*(x2)*(x3)))+(((2.22044604925031e-16)*(x13)*(x4)*(x5)*(x6)))+(((1.00000000000000)*(x11)*(x13)*(x3)*(x4)*(x5)))+(((2.22044604925031e-16)*(x12)*(x6)*(x7)*(x9))));
eerot[7]=((((-1.00000000000000)*(x1)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x12)*(x2)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x11)*(x13)*(x4)*(x5)*(x8)))+(((x1)*(x11)*(x12)*(x13)*(x2)*(x8)))+(((x12)*(x13)*(x3)*(x7)))+(((-1.00000000000000)*(x3)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x11)*(x12)*(x7)*(x8)*(x9)))+(((x1)*(x12)*(x2)*(x3)*(x9))));
eerot[8]=((((1.00000000000000)*(x13)*(x4)*(x5)*(x6)))+(((-1.00000000000000)*(x11)*(x12)*(x2)*(x5)))+(((-2.22044604925031e-16)*(x11)*(x12)*(x3)*(x7)*(x9)))+(((2.22044604925031e-16)*(x1)*(x11)*(x12)*(x13)*(x2)*(x3)))+(((-2.22044604925031e-16)*(x1)*(x3)*(x4)*(x6)))+(((-2.22044604925031e-16)*(x1)*(x12)*(x2)*(x8)*(x9)))+(((-2.22044604925031e-16)*(x12)*(x2)*(x3)*(x5)*(x6)))+(((-2.22044604925031e-16)*(x12)*(x13)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x12)*(x13)*(x2)*(x6)))+(((-2.22044604925031e-16)*(x11)*(x13)*(x3)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x11)*(x4)))+(((1.00000000000000)*(x12)*(x6)*(x7)*(x9)))+(((2.22044604925031e-16)*(x4)*(x5)*(x8)*(x9))));
eetrans[2]=((0.739675000000000)+(((0.180000000000000)*(x12)*(x6)*(x7)*(x9)))+(((0.180000000000000)*(x13)*(x4)*(x5)*(x6)))+(((-0.180000000000000)*(x1)*(x11)*(x4)))+(((-0.321000000000000)*(x1)*(x4)))+(((-0.180000000000000)*(x11)*(x12)*(x2)*(x5)))+(((-0.180000000000000)*(x1)*(x12)*(x13)*(x2)*(x6)))+(j[0])+(((-0.321000000000000)*(x12)*(x2)*(x5)))+(((-0.400000000000000)*(x4))));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j7, cj7, sj7,
j0, cj0, sj0,
j3, cj3, sj3,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((1.00000000000000)*(r02)))+(((2.22044604925031e-16)*(r00))));
new_r01=r01;
new_r02=((((2.22044604925031e-16)*(r02)))+(((-1.00000000000000)*(r00))));
new_px=((0.0500000000000000)+(((-3.99680288865056e-17)*(r00)))+(px)+(((-0.180000000000000)*(r02))));
new_r10=((((1.00000000000000)*(r12)))+(((2.22044604925031e-16)*(r10))));
new_r11=r11;
new_r12=((((2.22044604925031e-16)*(r12)))+(((-1.00000000000000)*(r10))));
new_py=((0.188000000000000)+(((-3.99680288865056e-17)*(r10)))+(py)+(((-0.180000000000000)*(r12))));
new_r20=((((2.22044604925031e-16)*(r20)))+(((1.00000000000000)*(r22))));
new_r21=r21;
new_r22=((((2.22044604925031e-16)*(r22)))+(((-1.00000000000000)*(r20))));
new_pz=((-0.739675000000000)+(((-3.99680288865056e-17)*(r20)))+(pz)+(((-0.180000000000000)*(r22)))+(((-1.00000000000000)*(j0))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
IKReal coniccoeffs[6], j1array[4];
int numsolutions;
IKReal x0=(px)*(px);
IKReal x1=(sj3)*(sj3);
IKReal x2=(py)*(py);
IKReal x3=(pz)*(pz);
IKReal x4=((0.0659462400000000)*(x0));
coniccoeffs[0]=((x4)+(((-0.0659462400000000)*(x2)))+(((-0.00412164000000000)*(x0)*(x1)))+(((0.00412164000000000)*(x1)*(x2))));
coniccoeffs[1]=((((-0.00412164000000000)*(px)*(py)*(x1)))+(((0.0659462400000000)*(px)*(py))));
coniccoeffs[2]=((((-0.00521471953620000)*(px)*(x1)))+(((0.0206082000000000)*(px)*(x0)*(x1)))+(((0.0206082000000000)*(px)*(x1)*(x3)))+(((0.0206082000000000)*(px)*(x1)*(x2))));
coniccoeffs[3]=0;
coniccoeffs[4]=((((0.0206082000000000)*(py)*(x0)*(x1)))+(((-0.00521471953620000)*(py)*(x1)))+(((0.0206082000000000)*(py)*(x1)*(x2)))+(((0.0206082000000000)*(py)*(x1)*(x3))));
coniccoeffs[5]=((((-0.103041000000000)*(x1)*((x3)*(x3))))+(((0.0480255553620000)*(x1)*(x2)))+(((-0.206082000000000)*(x0)*(x1)*(x3)))+(((-0.206082000000000)*(x0)*(x1)*(x2)))+(((-0.103041000000000)*(x1)*((x0)*(x0))))+(((0.0521471953620000)*(x0)*(x1)))+(((0.0521471953620000)*(x1)*(x3)))+(((0.000197477285042079)*(x1)))+(((-0.103041000000000)*(x1)*((x2)*(x2))))+(((-1.00000000000000)*(x4)))+(((-0.206082000000000)*(x1)*(x2)*(x3))));
conicsolver(coniccoeffs,j1array,numsolutions);
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
{
    j1 = j1array[ij1]; cj1 = IKcos(j1); sj1 = IKsin(j1);

{
IKReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.160000000000000)*(cj1)*(px)*(sj3)))+(((0.800000000000000)*(sj3)*((pz)*(pz))))+(((0.800000000000000)*(sj3)*((cj1)*(cj1))*((px)*(px))))+(((1.60000000000000)*(cj1)*(px)*(py)*(sj1)*(sj3)))+(((0.800000000000000)*(sj3)*((py)*(py))*((sj1)*(sj1))))+(((0.00800000000000000)*(sj3)))+(((-0.160000000000000)*(py)*(sj1)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
IKReal x5=((px)*(sj1));
IKReal x6=((cj1)*(py));
IKReal x7=((x5)+(((-1.00000000000000)*(x6))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x7;
evalcond[2]=x7;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
cj4array[0]=((-0.985362149532710)+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj1)*(px))));
if( cj4array[0] >= -1.0001 && cj4array[0] <= 1.0001 )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.321000000000000)*(cj1)*(px)*(sj4)))+(((-0.321000000000000)*(py)*(sj1)*(sj4)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.160000000000000)*(cj1)))+(((-0.256800000000000)*(cj1)*(cj4)))+(((-0.103041000000000)*(cj1)*((sj4)*(sj4))))+(((-0.103041000000000)*(cj1)*((cj4)*(cj4)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=px;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((-1.00000000000000)*(px));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj4)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj4)*(py)))+(((-0.321000000000000)*(pz)*(sj4)))+(((0.0321000000000000)*(cj4))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x8=((0.321000000000000)*(cj4));
IKReal x9=((0.400000000000000)+(x8));
IKReal x10=((0.0321000000000000)*(cj4));
IKReal x11=((0.0400000000000000)+(x10));
IKReal x12=((0.400000000000000)*(py));
IKReal x13=((0.321000000000000)*(pz)*(sj4));
IKReal x14=((py)*(x8));
IKReal x15=((x13)+(x12)+(x14));
IKReal x16=((((-1.00000000000000)*(x15)))+(x11));
IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x17)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj4)*(x9)))))), ((x17)*((((pz)*(pz))+(((-1.00000000000000)*((x9)*(x9))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x58=((0.400000000000000)*(pz));
IKReal x59=((0.0321000000000000)*(sj4));
IKReal x60=((0.321000000000000)*(cj4)*(pz));
IKReal x61=((x59)+(x58)+(x60));
IKReal x62=((0.321000000000000)*(py)*(sj4));
IKReal x63=((x61)+(((-1.00000000000000)*(x62))));
IKReal x64=((IKabs(x63) != 0)?((IKReal)1/(x63)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x64)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((pz)*(pz))))))), ((-1.00000000000000)*(x64)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x65=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x66=x2;
IKReal x67=x3;
IKReal x68=((0.0100000000000000)+(x66)+(x67));
IKReal x69=((0.200000000000000)*(py));
IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
IKReal x71=((IKabs(x70) != 0)?((IKReal)1/(x70)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x71)*(((((0.321000000000000)*(sj4)*(x65)))+(((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))), ((x71)*(((((-1.00000000000000)*(x65)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-0.321000000000000)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x72=((-1.00000000000000)*(px));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x72;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x72;
evalcond[4]=x72;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.321000000000000)*(py)*(sj4)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.321000000000000)*(py)*(sj4)))+(((0.400000000000000)*(pz)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x73=((0.321000000000000)*(py)*(sj4));
IKReal x74=((0.400000000000000)*(pz));
IKReal x75=((0.0321000000000000)*(sj4));
IKReal x76=((0.321000000000000)*(cj4)*(pz));
IKReal x77=((x76)+(x75)+(x74)+(x73));
IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
IKReal x79=((0.321000000000000)*(cj4));
IKReal x80=((0.400000000000000)+(x79));
IKReal x81=((0.100000000000000)+(py));
j2array[0]=IKatan2(((x78)*((((x81)*(x81))+(((-1.00000000000000)*((x80)*(x80))))))), ((x78)*(((((-0.321000000000000)*(sj4)*(x80)))+(((-1.00000000000000)*(pz)*(x81)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x82=((0.321000000000000)*(py)*(sj4));
IKReal x83=((0.400000000000000)*(pz));
IKReal x84=((0.0321000000000000)*(sj4));
IKReal x85=((0.321000000000000)*(cj4)*(pz));
IKReal x86=((x82)+(x83)+(x84)+(x85));
IKReal x87=((IKabs(x86) != 0)?((IKReal)1/(x86)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x87)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((pz)*(pz))))))), ((x87)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x88=((0.200000000000000)*(py));
IKReal x89=x2;
IKReal x90=x3;
IKReal x91=((0.0100000000000000)+(x88)+(x89)+(x90));
IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
IKReal x93=((0.100000000000000)+(py));
IKReal x94=((0.321000000000000)*(cj4));
IKReal x95=((0.400000000000000)+(x94));
j2array[0]=IKatan2(((-1.00000000000000)*(x92)*(((((-0.321000000000000)*(sj4)*(x93)))+(((pz)*(x95)))))), ((-1.00000000000000)*(x92)*(((((x93)*(x95)))+(((0.321000000000000)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x96=((0.100000000000000)*(cj1));
IKReal x97=((x96)+(((-1.00000000000000)*(px))));
IKReal x98=((0.256800000000000)*(cj1)*(cj4));
IKReal x99=(sj4)*(sj4);
IKReal x100=((0.103041000000000)*(cj1)*(x99));
IKReal x101=((0.160000000000000)*(cj1));
IKReal x102=(cj4)*(cj4);
IKReal x103=((0.103041000000000)*(cj1)*(x102));
IKReal x104=((x100)+(x101)+(x103)+(x98));
IKReal x105=((-1.00000000000000)*(x104));
IKReal x106=((IKabs(x105) != 0)?((IKReal)1/(x105)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x106)*(((((-0.321000000000000)*(sj4)*(x97)))+(((pz)*(((((0.400000000000000)*(cj1)))+(((0.321000000000000)*(cj1)*(cj4)))))))))), ((x106)*(((((0.321000000000000)*(cj1)*(pz)*(sj4)))+(((x97)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x107=((0.400000000000000)*(pz));
IKReal x108=((0.0321000000000000)*(sj4));
IKReal x109=((0.321000000000000)*(cj4)*(pz));
IKReal x110=((x108)+(x109)+(x107));
IKReal x111=((0.321000000000000)*(cj1)*(px)*(sj4));
IKReal x112=((0.321000000000000)*(py)*(sj1)*(sj4));
IKReal x113=((x112)+(x111));
IKReal x114=((((-1.00000000000000)*(x113)))+(x110));
IKReal x115=((IKabs(x114) != 0)?((IKReal)1/(x114)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x115)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((pz)*(pz))))))), ((-1.00000000000000)*(x115)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x116=((0.256800000000000)*(cj4));
IKReal x117=(sj4)*(sj4);
IKReal x118=((0.103041000000000)*(x117));
IKReal x119=(cj4)*(cj4);
IKReal x120=((0.103041000000000)*(x119));
IKReal x121=((0.160000000000000)+(x120)+(x116)+(x118));
IKReal x122=((IKabs(x121) != 0)?((IKReal)1/(x121)):(IKReal)1.0e30);
IKReal x123=((0.321000000000000)*(cj4));
IKReal x124=((0.400000000000000)+(x123));
IKReal x125=((cj1)*(px));
IKReal x126=((py)*(sj1));
IKReal x127=((x126)+(x125));
IKReal x128=((0.100000000000000)+(((-1.00000000000000)*(x127))));
j2array[0]=IKatan2(((-1.00000000000000)*(x122)*(((((-0.321000000000000)*(sj4)*(x128)))+(((pz)*(x124)))))), ((-1.00000000000000)*(x122)*(((((x124)*(x128)))+(((0.321000000000000)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x129=((cj1)*(py));
IKReal x130=((px)*(sj1));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((((-1.00000000000000)*(x129)))+(x130));
evalcond[2]=((x129)+(((-1.00000000000000)*(x130))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
cj4array[0]=((-0.985362149532710)+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj1)*(px))));
if( cj4array[0] >= -1.0001 && cj4array[0] <= 1.0001 )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.321000000000000)*(cj1)*(px)*(sj4)))+(((0.321000000000000)*(py)*(sj1)*(sj4)))+(((-0.0321000000000000)*(sj4)))+(((0.400000000000000)*(pz)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.160000000000000)*(cj1)))+(((-0.256800000000000)*(cj1)*(cj4)))+(((-0.103041000000000)*(cj1)*((sj4)*(sj4))))+(((-0.103041000000000)*(cj1)*((cj4)*(cj4)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=px;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((-1.00000000000000)*(px));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0100000000000000)+(((-0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.321000000000000)*(py)*(sj4)))+(((-0.0321000000000000)*(sj4)))+(((0.400000000000000)*(pz)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj4)*(py)))+(((0.321000000000000)*(pz)*(sj4)))+(((0.0321000000000000)*(cj4))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x131=((0.321000000000000)*(cj4));
IKReal x132=((0.400000000000000)+(x131));
IKReal x133=((0.321000000000000)*(pz)*(sj4));
IKReal x134=((0.0321000000000000)*(cj4));
IKReal x135=((0.0400000000000000)+(x134)+(x133));
IKReal x136=((0.400000000000000)*(py));
IKReal x137=((py)*(x131));
IKReal x138=((x137)+(x136));
IKReal x139=((x135)+(((-1.00000000000000)*(x138))));
IKReal x140=((IKabs(x139) != 0)?((IKReal)1/(x139)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x140)*(((((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))+(((-0.321000000000000)*(sj4)*(x132)))))), ((x140)*(((((-1.00000000000000)*((x132)*(x132))))+((pz)*(pz))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x141=((0.321000000000000)*(py)*(sj4));
IKReal x142=((0.400000000000000)*(pz));
IKReal x143=((0.321000000000000)*(cj4)*(pz));
IKReal x144=((x141)+(x142)+(x143));
IKReal x145=((0.0321000000000000)*(sj4));
IKReal x146=((((-1.00000000000000)*(x145)))+(x144));
IKReal x147=((IKabs(x146) != 0)?((IKReal)1/(x146)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x147)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((pz)*(pz))))))), ((x147)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x148=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x149=x2;
IKReal x150=x3;
IKReal x151=((0.0100000000000000)+(x150)+(x149));
IKReal x152=((0.200000000000000)*(py));
IKReal x153=((((-1.00000000000000)*(x152)))+(x151));
IKReal x154=((IKabs(x153) != 0)?((IKReal)1/(x153)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x154)*(((((-1.00000000000000)*(pz)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-0.321000000000000)*(sj4)*(x148)))))), ((x154)*(((((-1.00000000000000)*(x148)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((0.321000000000000)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x155=((-1.00000000000000)*(px));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x155;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x155;
evalcond[4]=px;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0100000000000000)+(((0.200000000000000)*(py)))+((py)*(py))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.0321000000000000)*(sj4)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.0321000000000000)*(sj4)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(py)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x156=((0.321000000000000)*(cj4));
IKReal x157=((0.400000000000000)+(x156));
IKReal x158=((0.100000000000000)+(py));
IKReal x159=((0.400000000000000)*(pz));
IKReal x160=((pz)*(x156));
IKReal x161=((x160)+(x159));
IKReal x162=((0.321000000000000)*(py)*(sj4));
IKReal x163=((0.0321000000000000)*(sj4));
IKReal x164=((x162)+(x163));
IKReal x165=((((-1.00000000000000)*(x164)))+(x161));
IKReal x166=((IKabs(x165) != 0)?((IKReal)1/(x165)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x166)*((((x158)*(x158))+(((-1.00000000000000)*((x157)*(x157))))))), ((x166)*(((((-1.00000000000000)*(pz)*(x158)))+(((0.321000000000000)*(sj4)*(x157)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x167=((0.400000000000000)*(pz));
IKReal x168=((0.321000000000000)*(cj4)*(pz));
IKReal x169=((x168)+(x167));
IKReal x170=((0.321000000000000)*(py)*(sj4));
IKReal x171=((0.0321000000000000)*(sj4));
IKReal x172=((x171)+(x170));
IKReal x173=((((-1.00000000000000)*(x172)))+(x169));
IKReal x174=((IKabs(x173) != 0)?((IKReal)1/(x173)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x174)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((pz)*(pz))))))), ((x174)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(py)))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x175=((0.200000000000000)*(py));
IKReal x176=x2;
IKReal x177=x3;
IKReal x178=((0.0100000000000000)+(x175)+(x177)+(x176));
IKReal x179=((IKabs(x178) != 0)?((IKReal)1/(x178)):(IKReal)1.0e30);
IKReal x180=((0.100000000000000)+(py));
IKReal x181=((0.321000000000000)*(cj4));
IKReal x182=((0.400000000000000)+(x181));
j2array[0]=IKatan2(((-1.00000000000000)*(x179)*(((((pz)*(x182)))+(((0.321000000000000)*(sj4)*(x180)))))), ((-1.00000000000000)*(x179)*(((((x180)*(x182)))+(((-0.321000000000000)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x183=((0.100000000000000)*(cj1));
IKReal x184=((x183)+(((-1.00000000000000)*(px))));
IKReal x185=((0.256800000000000)*(cj1)*(cj4));
IKReal x186=(sj4)*(sj4);
IKReal x187=((0.103041000000000)*(cj1)*(x186));
IKReal x188=((0.160000000000000)*(cj1));
IKReal x189=(cj4)*(cj4);
IKReal x190=((0.103041000000000)*(cj1)*(x189));
IKReal x191=((x190)+(x185)+(x187)+(x188));
IKReal x192=((-1.00000000000000)*(x191));
IKReal x193=((IKabs(x192) != 0)?((IKReal)1/(x192)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x193)*(((((0.321000000000000)*(sj4)*(x184)))+(((pz)*(((((0.400000000000000)*(cj1)))+(((0.321000000000000)*(cj1)*(cj4)))))))))), ((x193)*(((((x184)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-0.321000000000000)*(cj1)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x194=((0.321000000000000)*(cj1)*(px)*(sj4));
IKReal x195=((0.321000000000000)*(py)*(sj1)*(sj4));
IKReal x196=((0.400000000000000)*(pz));
IKReal x197=((0.321000000000000)*(cj4)*(pz));
IKReal x198=((x197)+(x196)+(x195)+(x194));
IKReal x199=((0.0321000000000000)*(sj4));
IKReal x200=((((-1.00000000000000)*(x199)))+(x198));
IKReal x201=((IKabs(x200) != 0)?((IKReal)1/(x200)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x201)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((pz)*(pz))))))), ((x201)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x202=((0.256800000000000)*(cj4));
IKReal x203=(sj4)*(sj4);
IKReal x204=((0.103041000000000)*(x203));
IKReal x205=(cj4)*(cj4);
IKReal x206=((0.103041000000000)*(x205));
IKReal x207=((0.160000000000000)+(x206)+(x204)+(x202));
IKReal x208=((IKabs(x207) != 0)?((IKReal)1/(x207)):(IKReal)1.0e30);
IKReal x209=((0.321000000000000)*(cj4));
IKReal x210=((0.400000000000000)+(x209));
IKReal x211=((cj1)*(px));
IKReal x212=((py)*(sj1));
IKReal x213=((x211)+(x212));
IKReal x214=((0.100000000000000)+(((-1.00000000000000)*(x213))));
j2array[0]=IKatan2(((-1.00000000000000)*(x208)*(((((pz)*(x210)))+(((0.321000000000000)*(sj4)*(x214)))))), ((-1.00000000000000)*(x208)*(((((x210)*(x214)))+(((-0.321000000000000)*(pz)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x215=x3;
IKReal x216=x0;
IKReal x217=x2;
IKReal x218=((cj3)*(px)*(sj1));
IKReal x219=((cj1)*(cj3)*(py));
IKReal x220=((0.0669590000000000)+(x215)+(x216)+(x217));
IKReal x221=((0.200000000000000)*(cj1)*(px));
IKReal x222=((0.200000000000000)*(py)*(sj1));
IKReal x223=((x221)+(x222));
IKReal x224=((x220)+(((-1.00000000000000)*(x223))));
IKReal x225=((0.800000000000000)*(sj3)*(x215));
IKReal x226=(cj1)*(cj1);
IKReal x227=((0.800000000000000)*(sj3)*(x216)*(x226));
IKReal x228=((1.60000000000000)*(cj1)*(px)*(py)*(sj1)*(sj3));
IKReal x229=(sj1)*(sj1);
IKReal x230=((0.800000000000000)*(sj3)*(x217)*(x229));
IKReal x231=((0.00800000000000000)*(sj3));
IKReal x232=((x228)+(x225)+(x227)+(x230)+(x231));
IKReal x233=((0.160000000000000)*(cj1)*(px)*(sj3));
IKReal x234=((0.160000000000000)*(py)*(sj1)*(sj3));
IKReal x235=((x233)+(x234));
IKReal x236=((((-1.00000000000000)*(x235)))+(x232));
IKReal x237=((IKabs(x236) != 0)?((IKReal)1/(x236)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x237)*(((((-1.00000000000000)*(pz)*(sj3)*(x224)))+(((((x219)+(((-1.00000000000000)*(x218)))))*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj1)))+(((-0.800000000000000)*(cj1)*(px)))))))))), ((x237)*(((((x224)*(((((-0.100000000000000)*(sj3)))+(((py)*(sj1)*(sj3)))+(((cj1)*(px)*(sj3)))))))+(((0.800000000000000)*(pz)*(((x218)+(((-1.00000000000000)*(x219)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x238=((px)*(sj1));
IKReal x239=((cj1)*(py));
IKReal x240=((((-1.00000000000000)*(x239)))+(x238));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x240;
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
evalcond[3]=x240;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.103041000000000)*((cj2)*(cj2))))+(((-0.103041000000000)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x241=x238;
IKReal x242=x239;
IKReal x243=((x241)+(((-1.00000000000000)*(x242))));
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x243;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x243;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x244=x238;
IKReal x245=x239;
IKReal x246=((x244)+(((-1.00000000000000)*(x245))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x246;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=x246;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x247=x238;
IKReal x248=x239;
IKReal x249=((x247)+(((-1.00000000000000)*(x248))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x249;
evalcond[2]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((py)*(sj1))));
evalcond[3]=x249;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x250=x238;
IKReal x251=x239;
IKReal x252=((x250)+(((-1.00000000000000)*(x251))));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x252;
evalcond[2]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
evalcond[3]=x252;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(pz)), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x253=((0.400000000000000)*(sj2));
IKReal x254=((x253)+(pz));
IKReal x255=((-1.00000000000000)*(x254));
IKReal x256=((0.400000000000000)*(cj2));
IKReal x257=((0.100000000000000)+(x256));
IKReal x258=((cj1)*(px));
IKReal x259=((py)*(sj1));
IKReal x260=((x258)+(x259));
IKReal x261=((x257)+(((-1.00000000000000)*(x260))));
IKReal x262=(cj2)*(cj2);
IKReal x263=((0.103041000000000)*(x262));
IKReal x264=(sj2)*(sj2);
IKReal x265=((0.103041000000000)*(x264));
IKReal x266=((x265)+(x263));
IKReal x267=((-1.00000000000000)*(x266));
IKReal x268=((IKabs(x267) != 0)?((IKReal)1/(x267)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x268)*(((((-0.321000000000000)*(sj2)*(x261)))+(((-0.321000000000000)*(cj2)*(x255)))))), ((x268)*(((((-0.321000000000000)*(sj2)*(x255)))+(((0.321000000000000)*(cj2)*(x261)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-0.321000000000000)*(sj2)*(((0.400000000000000)+(((-1.00000000000000)*(cj2)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)))+(((pz)*(sj2)))+(((0.100000000000000)*(cj2)))))))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((-3.11526479750779)*(cj2)*(pz)))+(((-3.11526479750779)*(cj1)*(px)*(sj2)))+(((-3.11526479750779)*(py)*(sj1)*(sj2)))+(((0.311526479750779)*(sj2)))), ((-9.70487475859124)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj2)*(((((-1.00000000000000)*(cj1)*(px)*(sj2)))+(((-1.00000000000000)*(py)*(sj1)*(sj2)))+(((0.100000000000000)*(sj2)))+(((-1.00000000000000)*(cj2)*(pz)))))))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x269=((cj1)*(py));
IKReal x270=((px)*(sj1));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((x270)+(((-1.00000000000000)*(x269))));
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
evalcond[3]=((x269)+(((-1.00000000000000)*(x270))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.103041000000000)*((cj2)*(cj2))))+(((0.103041000000000)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x271=x269;
IKReal x272=x270;
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x272)+(((-1.00000000000000)*(x271))));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((x271)+(((-1.00000000000000)*(x272))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x273=x269;
IKReal x274=x270;
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((x274)+(((-1.00000000000000)*(x273))));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[3]=((x273)+(((-1.00000000000000)*(x274))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x275=x269;
IKReal x276=x270;
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((x276)+(((-1.00000000000000)*(x275))));
evalcond[2]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((py)*(sj1))));
evalcond[3]=((x275)+(((-1.00000000000000)*(x276))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(pz)), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x277=x269;
IKReal x278=x270;
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((x278)+(((-1.00000000000000)*(x277))));
evalcond[2]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
evalcond[3]=((x277)+(((-1.00000000000000)*(x278))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-3.11526479750779)*(pz)), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x279=(cj2)*(cj2);
IKReal x280=((0.103041000000000)*(x279));
IKReal x281=(sj2)*(sj2);
IKReal x282=((0.103041000000000)*(x281));
IKReal x283=((x282)+(x280));
IKReal x284=((IKabs(x283) != 0)?((IKReal)1/(x283)):(IKReal)1.0e30);
IKReal x285=((0.400000000000000)*(sj2));
IKReal x286=((x285)+(pz));
IKReal x287=((-1.00000000000000)*(x286));
IKReal x288=((0.400000000000000)*(cj2));
IKReal x289=((0.100000000000000)+(x288));
IKReal x290=((cj1)*(px));
IKReal x291=((py)*(sj1));
IKReal x292=((x290)+(x291));
IKReal x293=((((-1.00000000000000)*(x292)))+(x289));
j4array[0]=IKatan2(((x284)*(((((-0.321000000000000)*(sj2)*(x293)))+(((-0.321000000000000)*(cj2)*(x287)))))), ((x284)*(((((0.321000000000000)*(sj2)*(x287)))+(((-0.321000000000000)*(cj2)*(x293)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-0.321000000000000)*(sj2)*(((0.400000000000000)+(((-1.00000000000000)*(cj2)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)))+(((pz)*(sj2)))+(((0.100000000000000)*(cj2)))))))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(px)*(sj2)))+(((3.11526479750779)*(cj2)*(pz)))+(((3.11526479750779)*(py)*(sj1)*(sj2)))+(((-0.311526479750779)*(sj2)))), ((-9.70487475859124)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj2)*(((((-1.00000000000000)*(cj1)*(px)*(sj2)))+(((-1.00000000000000)*(py)*(sj1)*(sj2)))+(((0.100000000000000)*(sj2)))+(((-1.00000000000000)*(cj2)*(pz)))))))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((py)*(sj1))));
evalcond[2]=((((cj3)*(px)*(sj1)))+(((-1.00000000000000)*(pz)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x294=((-1.00000000000000)*(pz));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x294;
evalcond[2]=x294;
evalcond[3]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((py)*(sj1))));
evalcond[4]=x294;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)))+(((-3.11526479750779)*(px)*(sj1)))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x295=((-1.00000000000000)*(pz));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x295;
evalcond[2]=x295;
evalcond[3]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((py)*(sj1))));
evalcond[4]=pz;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(py)))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(py));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj3)))+(((cj3)*(px))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((-3.11526479750779)*(px)*(sj3)))+(((-3.11526479750779)*(cj3)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(py)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-1.00000000000000)*(py))));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj3)))+(((-1.00000000000000)*(cj3)*(px))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj3)))+(((-3.11526479750779)*(cj3)*(pz)))), ((-1.55763239875389)+(((-3.11526479750779)*(py)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x296=((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30);
j4array[0]=IKatan2(((-3.11526479750779)*(pz)*(x296)), ((-9.70487475859124)*(x296)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((0.321000000000000)*(pz)*(sj1)*(sj3)))+(((0.321000000000000)*(cj3)*(((((0.500000000000000)*(cj1)))+(((-1.00000000000000)*(px)))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-3.11526479750779)*(pz)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
evalcond[2]=((((cj3)*(px)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(py)))+(((pz)*(sj3))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.000001  || IKabs(dummyeval[1]) < 0.000001  )
{
{
IKReal evalcond[4];
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-1.00000000000000)*(pz));
evalcond[2]=pz;
evalcond[3]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)))+(((-3.11526479750779)*(px)*(sj1)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-1.00000000000000)*(pz));
evalcond[2]=pz;
evalcond[3]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(py)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((-0.600000000000000)*(py))));
evalcond[2]=((((pz)*(sj3)))+(((cj3)*(px))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj3)*(pz)))+(((-3.11526479750779)*(px)*(sj3)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.600000000000000)*(py))));
evalcond[2]=((((-1.00000000000000)*(cj3)*(px)))+(((pz)*(sj3))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj3)))+(((3.11526479750779)*(cj3)*(pz)))), ((-0.934579439252337)+(((3.11526479750779)*(py)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x297=((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30);
j4array[0]=IKatan2(((3.11526479750779)*(pz)*(x297)), ((-9.70487475859124)*(x297)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((0.321000000000000)*(pz)*(sj1)*(sj3)))+(((-0.321000000000000)*(cj3)*(((((-0.300000000000000)*(cj1)))+(((-1.00000000000000)*(px)))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(pz)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[2]=((((cj3)*(px)*(sj1)))+(((-1.00000000000000)*(cj1)*(px)*(sj3)))+(((-1.00000000000000)*(py)*(sj1)*(sj3)))+(((0.100000000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.321000000000000)*(cj1)*(cj3)))+(((-0.321000000000000)*(sj1)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal evalcond[5];
IKReal x298=((cj1)*(px));
IKReal x299=((py)*(sj1));
IKReal x300=((x298)+(x299));
IKReal x301=((0.100000000000000)+(((-1.00000000000000)*(x300))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x301;
evalcond[2]=x301;
evalcond[3]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(x299)))+(((0.200000000000000)*(x298))));
evalcond[4]=x301;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)))+(((-3.11526479750779)*(px)*(sj1)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x302=((cj1)*(px));
IKReal x303=((py)*(sj1));
IKReal x304=((x302)+(x303));
IKReal x305=((0.100000000000000)+(((-1.00000000000000)*(x304))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x305;
evalcond[2]=x305;
evalcond[3]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.200000000000000)*(x303)))+(((0.200000000000000)*(x302))));
evalcond[4]=((-0.100000000000000)+(x304));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.321000000000000)*(cj1)*(cj3)))+(((-0.321000000000000)*(sj1)*(sj3))))) != 0)?((IKReal)1/(((((-0.321000000000000)*(cj1)*(cj3)))+(((-0.321000000000000)*(sj1)*(sj3)))))):(IKReal)1.0e30))*(((((-0.100000000000000)*(cj1)))+(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.24610591900312)+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz)))));
evalcond[2]=((((cj3)*(px)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(py)))+(((-0.100000000000000)*(sj3)))+(((py)*(sj1)*(sj3)))+(((cj1)*(px)*(sj3))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)*(sj3)))+(((3.11526479750779)*(cj1)*(cj3)*(px)))+(((-3.11526479750779)*(px)*(sj1)*(sj3)))+(((3.11526479750779)*(cj3)*(py)*(sj1)))+(((-0.311526479750779)*(cj3)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x306=((0.100000000000000)*(sj2));
IKReal x307=((cj2)*(pz));
IKReal x308=((py)*(sj1)*(sj2));
IKReal x309=((cj1)*(px)*(sj2));
IKReal x310=((x308)+(x309)+(x307));
IKReal x311=((x306)+(((-1.00000000000000)*(x310))));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x311;
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
evalcond[3]=x311;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)))+(((-3.11526479750779)*(px)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x312=((cj2)*(pz));
IKReal x313=((py)*(sj1)*(sj2));
IKReal x314=((cj1)*(px)*(sj2));
IKReal x315=((x314)+(x313)+(x312));
IKReal x316=((0.100000000000000)*(sj2));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((x316)+(((-1.00000000000000)*(x315))));
evalcond[2]=((-0.0669590000000000)+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
evalcond[3]=((x315)+(((-1.00000000000000)*(x316))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x317=((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30);
IKReal x318=((px)*(sj1));
IKReal x319=((cj1)*(py));
j4array[0]=IKatan2(((3.11526479750779)*(x317)*(((x319)+(((-1.00000000000000)*(x318)))))), ((9.70487475859124)*(x317)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((0.321000000000000)*(sj3)*(((((-0.400000000000000)*(sj2)))+(((-1.00000000000000)*(pz)))))))+(((0.321000000000000)*(cj2)*(cj3)*(((x318)+(((-1.00000000000000)*(x319)))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))*(((((0.128400000000000)*(sj2)))+(((-0.321000000000000)*(sj2)*(((0.400000000000000)+(((0.100000000000000)*(cj2)))+(((-1.00000000000000)*(cj2)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)))+(((pz)*(sj2)))))))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((3.11526479750779)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=((0.160000000000000)+(((0.103041000000000)*((cj4)*(cj4))))+(((0.103041000000000)*((cj3)*(cj3))*((sj4)*(sj4))))+(((0.256800000000000)*(cj4))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.321000000000000)*(cj4)*(pz)))+(((0.0321000000000000)*(cj3)*(sj4)))+(((-0.321000000000000)*(cj3)*(py)*(sj1)*(sj4)))+(((-0.321000000000000)*(cj1)*(cj3)*(px)*(sj4)))+(((0.400000000000000)*(pz))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((0.0400000000000000)+(((0.0321000000000000)*(cj4)))+(((-0.321000000000000)*(cj4)*(py)*(sj1)))+(((-0.400000000000000)*(cj1)*(px)))+(((-0.321000000000000)*(cj1)*(cj4)*(px)))+(((-0.321000000000000)*(cj3)*(pz)*(sj4)))+(((-0.400000000000000)*(py)*(sj1))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x320=((0.321000000000000)*(cj4));
IKReal x321=((0.400000000000000)+(x320));
IKReal x322=((0.0321000000000000)*(cj4));
IKReal x323=((0.0400000000000000)+(x322));
IKReal x324=((0.400000000000000)*(cj1)*(px));
IKReal x325=((0.400000000000000)*(py)*(sj1));
IKReal x326=((cj1)*(px)*(x320));
IKReal x327=((0.321000000000000)*(cj3)*(pz)*(sj4));
IKReal x328=((py)*(sj1)*(x320));
IKReal x329=((x324)+(x325)+(x326)+(x327)+(x328));
IKReal x330=((((-1.00000000000000)*(x329)))+(x323));
IKReal x331=((IKabs(x330) != 0)?((IKReal)1/(x330)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x331)*(((((0.321000000000000)*(cj3)*(sj4)*(x321)))+(((-1.00000000000000)*(pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))))), ((x331)*((((pz)*(pz))+(((-1.00000000000000)*((x321)*(x321))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x332=((0.321000000000000)*(cj4)*(pz));
IKReal x333=((0.0321000000000000)*(cj3)*(sj4));
IKReal x334=((0.400000000000000)*(pz));
IKReal x335=((x333)+(x332)+(x334));
IKReal x336=((0.321000000000000)*(cj1)*(cj3)*(px)*(sj4));
IKReal x337=((0.321000000000000)*(cj3)*(py)*(sj1)*(sj4));
IKReal x338=((x337)+(x336));
IKReal x339=((x335)+(((-1.00000000000000)*(x338))));
IKReal x340=((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x340)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.103041000000000)*((cj3)*(cj3))*((sj4)*(sj4))))))), ((-1.00000000000000)*(x340)*(((((pz)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))+(((0.321000000000000)*(cj3)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x341=(cj4)*(cj4);
IKReal x342=((0.103041000000000)*(x341));
IKReal x343=(cj3)*(cj3);
IKReal x344=(sj4)*(sj4);
IKReal x345=((0.103041000000000)*(x343)*(x344));
IKReal x346=((0.256800000000000)*(cj4));
IKReal x347=((0.160000000000000)+(x342)+(x346)+(x345));
IKReal x348=((IKabs(x347) != 0)?((IKReal)1/(x347)):(IKReal)1.0e30);
IKReal x349=((0.321000000000000)*(cj4));
IKReal x350=((0.400000000000000)+(x349));
IKReal x351=((cj1)*(px));
IKReal x352=((py)*(sj1));
IKReal x353=((x351)+(x352));
IKReal x354=((0.100000000000000)+(((-1.00000000000000)*(x353))));
j2array[0]=IKatan2(((-1.00000000000000)*(x348)*(((((-0.321000000000000)*(cj3)*(sj4)*(x354)))+(((pz)*(x350)))))), ((-1.00000000000000)*(x348)*(((((0.321000000000000)*(cj3)*(pz)*(sj4)))+(((x350)*(x354)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x18=((cj2)*(cj4)*(sj1));
IKReal x19=((cj1)*(sj3)*(sj4));
IKReal x20=((x19)+(x18));
IKReal x21=((cj3)*(sj1)*(sj2)*(sj4));
IKReal x22=((((-1.00000000000000)*(x21)))+(x20));
IKReal x23=((cj1)*(cj2)*(cj4));
IKReal x24=((sj1)*(sj3)*(sj4));
IKReal x25=((cj1)*(cj3)*(sj2)*(sj4));
IKReal x26=((x24)+(x25));
IKReal x27=((((-1.00000000000000)*(x26)))+(x23));
IKReal x28=((cj4)*(sj2));
IKReal x29=((cj2)*(cj3)*(sj4));
IKReal x30=((x28)+(x29));
IKReal x31=((-1.00000000000000)*(x30));
IKReal x32=((cj1)*(cj3));
IKReal x33=((sj1)*(sj2)*(sj3));
IKReal x34=((x33)+(x32));
IKReal x35=((cj1)*(sj2)*(sj3));
IKReal x36=((cj3)*(sj1));
IKReal x37=((((-1.00000000000000)*(x36)))+(x35));
IKReal x38=((x28)*(x36));
IKReal x39=((cj2)*(sj1)*(sj4));
IKReal x40=((x39)+(x38));
IKReal x41=((cj1)*(cj4)*(sj3));
IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
IKReal x43=((cj1)*(cj2)*(sj4));
IKReal x44=((x28)*(x32));
IKReal x45=((cj4)*(sj1)*(sj3));
IKReal x46=((x44)+(x45)+(x43));
IKReal x47=((cj2)*(cj3)*(cj4));
IKReal x48=((sj2)*(sj4));
IKReal x49=((((-1.00000000000000)*(x48)))+(x47));
new_r00=((((r20)*(x31)))+(((r10)*(x22)))+(((r00)*(x27))));
new_r01=((((r01)*(x27)))+(((r11)*(x22)))+(((r21)*(x31))));
new_r02=((((r02)*(x27)))+(((r22)*(x31)))+(((r12)*(x22))));
new_r10=((((r00)*(x37)))+(((r10)*(x34)))+(((cj2)*(r20)*(sj3))));
new_r11=((((r01)*(x37)))+(((r11)*(x34)))+(((cj2)*(r21)*(sj3))));
new_r12=((((cj2)*(r22)*(sj3)))+(((r02)*(x37)))+(((r12)*(x34))));
new_r20=((((r20)*(x49)))+(((r00)*(x46)))+(((r10)*(x42))));
new_r21=((((r01)*(x46)))+(((r11)*(x42)))+(((r21)*(x49))));
new_r22=((((r22)*(x49)))+(((r02)*(x46)))+(((r12)*(x42))));
{
IKReal j6eval;
j6eval=new_r00;
if( j6eval >= -1.000010 && j6eval <= -0.999990 )
{
{
j6 = 3.141593; sj6 = 0.000000; cj6 = -1.000000;
IKReal j5mul = 1;
j5=0;
IKReal j7mul=1.00000000000000;
j7=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[5].fmul = j5mul;
solution.basesol[5].freeind = 0;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.basesol[7].fmul = j7mul;
solution.basesol[7].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 5;
}

} else
if( j6eval >= 0.999990 && j6eval <= 1.000010 )
{
{
j6 = 0.000000; sj6 = 0.000000; cj6 = 1.000000;
IKReal j5mul = 1;
j5=0;
IKReal j7mul=-1.00000000000000;
j7=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[5].fmul = j5mul;
solution.basesol[5].freeind = 0;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.basesol[7].fmul = j7mul;
solution.basesol[7].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 5;
}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
j5array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1] = j5array[0] > 0 ? j5array[0]-IKPI : j5array[0]+IKPI;
sj5array[1] = -sj5array[0];
cj5array[1] = -cj5array[0];
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
if( j5array[1] > IKPI )
    j5array[1]-=IK2PI;
else if( j5array[1] < -IKPI )
    j5array[1]+=IK2PI;
j5valid[1] = true;
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
    j5valid[1]=false;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
IKReal x50=IKcos(j5);
IKReal x51=((IKabs(x50) != 0)?((IKReal)1/(x50)):(IKReal)1.0e30);
j7array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x51)), ((new_r11)*(x51)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
    j7array[0]-=IK2PI;
else if( j7array[0] < -IKPI )
    j7array[0]+=IK2PI;
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] ) { continue; }
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j5)) != 0)?((IKReal)1/(IKcos(j5))):(IKReal)1.0e30))), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r10)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j6);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
IKReal x52=IKcos(j6);
IKReal x53=((IKabs(x52) != 0)?((IKReal)1/(x52)):(IKReal)1.0e30);
IKReal x54=IKcos(j5);
IKReal x55=IKsin(j5);
j7array[0]=IKatan2(((((new_r21)*(x53)*(x54)))+(((-1.00000000000000)*(new_r11)*(x53)*(x55)))), ((((new_r21)*(x55)))+(((new_r11)*(x54)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
    j7array[0]-=IK2PI;
else if( j7array[0] < -IKPI )
    j7array[0]+=IK2PI;
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] ) { continue; }
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
IKReal x56=IKsin(j6);
IKReal x57=((IKabs(x56) != 0)?((IKReal)1/(x56)):(IKReal)1.0e30);
j7array[0]=IKatan2(((new_r01)*(x57)), ((new_r02)*(x57)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
    j7array[0]-=IK2PI;
else if( j7array[0] < -IKPI )
    j7array[0]+=IK2PI;
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] ) { continue; }
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}/// Durand-Kerner polynomial root finding method
static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[3];
    const int maxsteps = 50;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[3];
    IKReal err[3];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 3; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
/// intersection of a conic and the unit circle
static void conicsolver(IKReal _C0[6], IKReal roots[4], int& numroots)
{
    numroots = 0;
    // have to normalize _C0
    IKReal maxval = IKabs(_C0[0]);
    for(int i = 1; i < 6; ++i) {
        if( maxval < IKabs(_C0[i]) ) {
            maxval = IKabs(_C0[i]);
        }
    }
    IKReal C0[6];
    for(int i = 0; i < 6; ++i) {
        C0[i]=_C0[i]/maxval;
    }
    IKReal rawcoeffs[4] = {-1,
                           C0[5] - C0[0] - C0[3],
                           C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                           C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
    IKReal proots[3];
    int numproots, numyroots;
    polyroots3(rawcoeffs,proots,numproots);
    if( numproots < 1 ) {
        return;
    }
    int iroot=0;
    IKReal a, b, c, d, e, f;
    a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
    IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
    // find the greatest absolute value of adjugate and take that column
    int maxindex = 0;
    IKReal val = IKabs(adjugate[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(adjugate[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    maxindex = maxindex%3;
    if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
        // according to the structure of the matrix, should be always negative if a solution exists...
        return;
    }
    IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
    IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
    // C = C0 - [p_x] = 2gh^t, C is rank1
    IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
    maxindex = 0;
    val = IKabs(C[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(C[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    int row = maxindex/3;
    int col = maxindex%3;
    IKReal lineequation[3], coeffs[3], yintersections[2];
    for(int i = 0; i < 2; ++i) {
        if( i == 0 ) {
            lineequation[0] = C[3*row];
            lineequation[1] = C[3*row+1];
            lineequation[2] = C[3*row+2];
        }
        else {
            lineequation[0] = C[col];
            lineequation[1] = C[3+col];
            lineequation[2] = C[6+col];
        }

        if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
            yintersections[0] = -lineequation[2]/lineequation[1];
            IKReal x = 1-yintersections[0]*yintersections[0];
            if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
            }
            else {
                x = IKsqrt(x);
                roots[numroots++] = IKatan2(yintersections[0], x);
                roots[numroots] = IKPI - roots[numroots-1]; numroots++;
            }
        }
        else {
            coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
            coeffs[1] = 2*lineequation[1]*lineequation[2];
            coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
            polyroots2(coeffs,yintersections,numyroots);
            for(int j = 0; j < numyroots; ++j) {
                // the mathematical solution would be: IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                // however due to numerical imprecisions, it is better to compute sqrt(1-yintersections[j]*yintersections[j]) and choose sign 
                IKReal x = 1-yintersections[j]*yintersections[j];
                if( x <= 0 ) {
                    if( x > -std::numeric_limits<IKReal>::epsilon() ) {
                        roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                    }
                }
                else {
                    x = IKsqrt(x);
                    if( (lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0] > 0 ) {
                        x = -x;
                    }
                    roots[numroots++] = IKatan2(yintersections[j],x);
                }
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "c363859a2d7a151a22dc1e251d6d8669"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
